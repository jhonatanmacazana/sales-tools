generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]

    @@map("user")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

// Business Logic
model Example {
    id String @id @default(cuid())

    @@map("examples")
}

enum TransactionType {
    CASH
    CARD
    TRANSFER
    YAPE
    PLIN
    OTHERS
}

model Transaction {
    id          String          @id @default(cuid())
    amount      Float
    description String?         @db.Text
    type        TransactionType
    // transactionBlockId String          @map("transaction_block_id")
    createdAt   DateTime        @default(now()) @map("created_at")
    updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at")
    // createdBy        String          @map("created_by")
    // creator          User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)

    // transactionBlock TransactionBlock @relation(fields: [transactionBlockId], references: [id], onDelete: Cascade)

    @@map("transactions")
}

// model TransactionBlock {
//     id          String   @id @default(cuid())
//     systemTotal Float    @map("system_total")
//     realTotal   Float    @map("real_total")
//     createdAt   DateTime @default(now()) @map("created_at")
//     updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
//     // createdBy    String?       @map("created_by")
//     // creator      User?         @relation(fields: [createdBy], references: [id], onDelete: Cascade)

//     transactions Transaction[]

//     @@map("transaction_blocks")
// }
